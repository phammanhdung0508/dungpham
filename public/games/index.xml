<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Games on Sunf</title>
    <link>https://dungpham.vercel.app/games/</link>
    <description>Sunf (Games)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
    <atom:link href="https://dungpham.vercel.app/games/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://dungpham.vercel.app/games/ttt/tictactoe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dungpham.vercel.app/games/ttt/tictactoe/</guid>
      <description>&lt;style&gt;
    .ttt-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
    }

    .ttt-title {
        font-size: 100px;
        margin-top: 0;
    }

    .board {
        display: grid;
        height: auto;
        grid-template-columns: repeat(3, 100px);
        gap: 10px;
        margin: auto auto;
    }

    .cell {
        width: 100px;
        height: 100px;
        background-color: #eee;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        font-size: 50px;
        cursor: pointer;
        color: black;
    }

    .restartButton {
        align-items: center;
        appearance: none;
        background-color: #FCFCFD;
        border-radius: 4px;
        border-width: 0;
        box-shadow: rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
        box-sizing: border-box;
        color: #36395A;
        cursor: pointer;
        display: inline-flex;
        font-family: &#34;JetBrains Mono&#34;, monospace;
        height: 48px;
        justify-content: center;
        line-height: 1;
        list-style: none;
        overflow: hidden;
        padding-left: 16px;
        padding-right: 16px;
        position: relative;
        text-align: left;
        text-decoration: none;
        transition: box-shadow .15s, transform .15s;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        white-space: nowrap;
        will-change: box-shadow, transform;
        font-size: 18px;
        margin-top: 20px;
    }

    .restartButton:focus {
        box-shadow: #D6D6E7 0 0 0 1.5px inset, rgba(45, 35, 66, 0.4) 0 2px 4px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
    }

    .restartButton:hover {
        box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px, rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #D6D6E7 0 -3px 0 inset;
        transform: translateY(-2px);
    }

    .restartButton:active {
        box-shadow: #D6D6E7 0 3px 7px inset;
        transform: translateY(2px);
    }

    /* Điều chỉnh responsive cho .ttt-container */
    @media screen and (max-width: 600px) {
        .ttt-container {
            padding: 0 10px;
            /* Ví dụ điều chỉnh padding cho thiết bị có màn hình nhỏ hơn */
        }
    }

    /* Điều chỉnh responsive cho .board */
    @media screen and (max-width: 600px) {
        .board {
            grid-template-columns: repeat(2, 100px);
            /* Ví dụ giảm số cột khi màn hình nhỏ hơn */
        }
    }

    /* Điều chỉnh responsive cho .restartButton */
    @media screen and (max-width: 600px) {
        .restartButton {
            font-size: 14px;
            /* Ví dụ giảm kích thước font cho màn hình nhỏ hơn */
        }
    }
&lt;/style&gt;

&lt;body&gt;
    &lt;div class=&#34;ttt-container&#34;&gt;
        &lt;h1 class=&#34;ttt-title&#34;&gt;Tic Tac Toe&lt;/h1&gt;
        &lt;div id=&#34;board&#34; class=&#34;board&#34;&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;0&#34; data-j=&#34;0&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;0&#34; data-j=&#34;1&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;0&#34; data-j=&#34;2&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;1&#34; data-j=&#34;0&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;1&#34; data-j=&#34;1&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;1&#34; data-j=&#34;2&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;2&#34; data-j=&#34;0&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;2&#34; data-j=&#34;1&#34;&gt;&lt;/div&gt;
            &lt;div class=&#34;cell&#34; data-cell data-i=&#34;2&#34; data-j=&#34;2&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;button id=&#34;restartButton&#34; class=&#34;restartButton&#34;&gt;Restart&lt;/button&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;script&gt;
    const cells = document.querySelectorAll(&#39;[data-cell]&#39;);
    const player = &#39;X&#39;,
        bot = &#39;O&#39;;
    let botwin = 0,
        playerwin = 0;
    let isOver = false;
    const board = [
        [&#39;&#39;, &#39;&#39;, &#39;&#39;],
        [&#39;&#39;, &#39;&#39;, &#39;&#39;],
        [&#39;&#39;, &#39;&#39;, &#39;&#39;]];
    let score = {
        &#39;X&#39;: -10,
        &#39;O&#39;: 10,
        &#39;draw&#39;: 0
    }

    function over() {
        for (let i = 0; i &lt; board.length; i++) {
            // row
            if (board[i][0] != &#39;&#39; &amp;&amp;
                board[i][0] == board[i][1] &amp;&amp;
                board[i][1] == board[i][2]) {

                isOver = true;
                return board[i][0];
            }
            // column
            if (board[0][i] != &#39;&#39; &amp;&amp;
                board[0][i] == board[1][i] &amp;&amp;
                board[1][i] == board[2][i]) {
                isOver = true;
                return board[0][i];
            }
        }

        // cross
        if (board[0][0] != &#39;&#39; &amp;&amp;
            board[0][0] == board[1][1] &amp;&amp;
            board[1][1] == board[2][2]) {
            isOver = true;
            return board[0][0];
        }
        if (board[0][2] != &#39;&#39; &amp;&amp;
            board[0][2] == board[1][1] &amp;&amp;
            board[1][1] == board[2][0]) {
            isOver = true;
            return board[0][2];
        }

        //full
        for (let i = 0; i &lt; board.length; i++) {
            for (let j = 0; j &lt; board[i].length; j++) {
                if (board[i][j] == &#39;&#39;) {
                    isOver = false;
                    return &#39;&#39;;
                }
            }
        }
        isOver = true;
        return &#39;draw&#39;;
    }

    function move() {
        let bestScore = -Infinity;
        let bestI = -1, bestJ = -1;

        for (let i = 0; i &lt; board.length; i++) {
            for (let j = 0; j &lt; board[i].length; j++) {
                if (board[i][j] == &#39;&#39;) {
                    board[i][j] = bot;
                    let score = minimax(board, 0, false);
                    board[i][j] = &#39;&#39;;
                    if (score &gt; bestScore) {
                        bestScore = score;
                        bestI = i;
                        bestJ = j;
                    }
                }
            }
        }

        if (bestI != -1 &amp;&amp;
            bestJ != -1) {
            board[bestI][bestJ] = bot;
            setValue(bestI, bestJ, bot);
        }
    }

    function minimax(board, depth, isMaxmizing) {
        let winner = over();
        if (isOver) {
            let v = score[winner];
            return v;
        }

        if (isMaxmizing) {
            let bestSocre = -Infinity;//Min
            for (let i = 0; i &lt; board.length; i++) {
                for (let j = 0; j &lt; board[i].length; j++) {
                    if (board[i][j] == &#39;&#39;) {
                        board[i][j] = bot;
                        let score = minimax(board, depth + 1, false);
                        board[i][j] = &#39;&#39;;
                        bestSocre = Math.max(score, bestSocre);
                    }
                }
            }
            return bestSocre;
        } else {
            let bestSocre = Infinity;//Max
            for (let i = 0; i &lt; board.length; i++) {
                for (let j = 0; j &lt; board[i].length; j++) {
                    if (board[i][j] == &#39;&#39;) {
                        board[i][j] = player;
                        let score = minimax(board, depth + 1, true);
                        board[i][j] = &#39;&#39;;
                        bestSocre = Math.min(score, bestSocre);
                    }
                }
            }
            return bestSocre;
        }
        return 0;
    }

    function play(e) {
        winner = over();
        if (isOver) {
            if (winner == bot) {
                botwin++;
                alert(`${bot} wins!`);
            }
            else if (winner == player) {
                playerwin++;
                alert(`${player} wins!`);
            }
            else {
                alert(`draw!`);
            }
        }
        if (!isOver) {
            const cell = e.target;
            cell.textContent = player;

            const i = parseInt(this.getAttribute(&#39;data-i&#39;));
            const j = parseInt(this.getAttribute(&#39;data-j&#39;));

            board[i][j] = player;

            //bot move
            move();
        }
    }

    function setValue(i, j, value) {
        const cell = document.querySelector(`[data-cell][data-i=&#34;${i}&#34;][data-j=&#34;${j}&#34;]`);
        if (cell) {
            cell.textContent = value;
        }
    }

    cells.forEach(cell =&gt; {
        cell.addEventListener(&#39;click&#39;, play);
    });

    restartButton.addEventListener(&#39;click&#39;, handleRestart = () =&gt; {
        cells.forEach(cell =&gt; {
            cell.textContent = &#39;&#39;;
        });
        for (let i = 0; i &lt; board.length; i++) {
            for (let j = 0; j &lt; board[i].length; j++) {
                board[i][j] = &#39;&#39;;
            }
        }
    });
&lt;/script&gt;</description>
    </item>
    
  </channel>
</rss>
